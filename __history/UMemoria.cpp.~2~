//---------------------------------------------------------------------------

#pragma hdrstop

#include "UMemoria.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

int Numero_Ids(string cadena){
	int cantidad=0;
	for (int i = 0; i < cadena.Length(); i++) {
		if (cantidad[i]==',') {
			cnatidad ++;
		}
	}
	if (!cadena.empty()) {
		cantidad+=1;
	} else{
		cantidad+=0;
	}
	return cantidad;
}

string Obtener_Id(string cadena, int i){
	string palabra="";
	int contador=0;
	int i=0;
	while (contador<n-1 && i<cadena.Length()){
		if (cadena.at(i)==',')) {
            contador ++;
		}
	}

}


	CSMemoria::CSMemoria(){  // crear
		mem=new NodoMem[Max];
		for (int i = 0; i < Max; i++) {
			mem[i].link=i+1;
		}
		mem[Max-1].link=-1;
		this ->libre=0;
	}

	direccion_mem CSMemoria::new_espacio(string cadena){
		int cant=Numero_Ids(cadena);
		int dir=libre;
		int d=libre;
		for (int i=1; <= cant-1; i++) {
			mem[d].id=Obtener_Id(cadena,i);
			d=mem[d].link;
		}
		libre=mem[d].link;
		mem[d].link=-1;
		mem[d].id=Obtener_Id(cadena, cant);
		return dir;
	}
	void CSMemoria::Delete_espacio(int dir){}
	void CSMemoria::poner_dato(int dir, string cadena_id, int valor){}
	int CSMemoria::obtener_dato(int dir, string lugar){}
	int CSMemoria::Espacio_disponible(){}
	int CSMemoria::Espacio_ocupado(){}
	bool CSMemoria::dir_libre(int dir){}
	void CSMemoria::mestrar_memoria(){}
