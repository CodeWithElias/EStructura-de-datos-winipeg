//---------------------------------------------------------------------------

#pragma hdrstop

#include "PolinomioV2.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)


PoliV::PoliV() {
	ntEPC = 0;
	vEPC = new int[MAXP];
	for (int i = 0; i < MAXP; i++)
	{
		vEPC[i] = 0;
	}
}




bool PoliV::es_cero() {
	return ntEPC == 0;
}




int PoliV::grado() {
	if (ntEPC > 0) {
		int max = MAXP;
		int mayorGrado = vEPC[max/2];
		for (int i = max/2; i < max; i++)
			if (vEPC[i] > mayorGrado)
				mayorGrado = vEPC[i];
		return mayorGrado;
	}
	else
		cout << "ERROR: NO EXISTEN TERMINOS\n";
		return 0;
}





int PoliV::coeficiente(int exp) {
	if (ntEPC > 0) {
		int max=MAXP;
		for(int i=0;i<max;i++)
		{
		   int coeficiente=vEPC[i];
		   int exponente=vEPC[(max-1)-i];
		   if(exponente==exp)
		   {
			   return coeficiente;
		   }
		}
	}
	else
	{
		cout << "ERROR: NO EXISTEN TERMINOS\n";
		return 0;
	}
}





void PoliV::asignar_coeficiente(int coef, int exp) {


}





void PoliV::poner_termino(int coef, int exp) {
	int max=MAXP;
	if(ntEPC<max/2){ //mientras haya espacio en el vector
	  if (coef == 0) {
		return;
		}
		// Verificar si el exponente ya existe en el polinomio
		for (int i = 0; i < ntEPC; i++) {
			int buscExp=exponente(i+1);//Busca si existe el exponente
			if(exp==buscExp)
			{
				int nuevoCoef=vEPC[i]+coef;
				if(nuevoCoef!=0)
				{
					vEPC[i]=nuevoCoef;
					return;
				}
				else        //Si es 0 se debe poner en 0 el coef, el exp y reducir el nt
				{
					vEPC[i]=0;
					vEPC[(max-1)-i]=0;
					ntEPC--;
					return;
				}
			}
		}
		// Si el exponente no existe, agregar un nuevo término al polinomio
		vEPC[ntEPC] = coef;
		vEPC[(max-1)-ntEPC]=exp;
		ntEPC++;
	}
	else
	{
	  cout << "ERROR: EL VECTOR ESTÁ LLENO\n";
	}
}





int PoliV::numero_terminos() {
	return ntEPC;
}





int PoliV::exponente(int nro) {
	int max=MAXP;
	if (nro >= 1 && nro <= ntEPC) {
		return vEPC[max-nro];
	}
}

void PoliV::sumar(PoliV* p1, PoliV* p2, PoliV* &pr) {
	pr = new PoliV();
	for (int i = 1; i <= p1->numero_terminos(); i++) {
		int ex = p1->exponente(i);
		int co = p1->coeficiente(ex);
		pr->poner_termino(ex, co);
	}
	for (int i = 1; i <= p2->numero_terminos(); i++) {
		int ex = p2->exponente(i);
		int co = p2->coeficiente(ex);
		pr->poner_termino(ex, co);
	}
}

void PoliV::restar(PoliV* p1, PoliV* p2, PoliV* &pr) {
	pr = new PoliV();
	for (int i = 1; i <= p1->numero_terminos(); i++) {
		int ex = p1->exponente(i);
		int co = p1->coeficiente(ex);
		pr->poner_termino(ex, co);
	}
	for (int i = 1; i <= p2->numero_terminos(); i++) {
		int ex = p2->exponente(i);
		int co = p2->coeficiente(ex);
		pr->poner_termino(-ex, co);
	}
}

void PoliV::multiplicar(PoliV* p1, PoliV* p2, PoliV* &pr) {
	pr = new PoliV();
}






void PoliV::derivar() {
	int n = numero_terminos();
	int* exn = new int[n];
	int* con = new int[n];
	int c = 0;
	while (!es_cero()) {
		int ex = exponente(1);
		int co = coeficiente(ex);
		poner_termino(-co, ex);
		exn[c] = ex;
		con[c] = co;
		c++;
	}
	for (int i = 0; i < n; i++) {
		int ex = exn[i];
		int co = con[i];
		poner_termino(co*ex, ex - 1);
	}
}




void PoliV::derivar2()   //Deriva y afecta el mismo vector
{
   int max=MAXP;
   for (int i = 0; i < ntEPC; i++) {
		int exp = exponente(i + 1);
		int coef = coeficiente(exp);
		vEPC[i]=coef*exp;
		if(exp-1==0)
		{
			vEPC[i]=0;
			vEPC[(max-1)-i]=0;
			ntEPC--;
		}
		else
		{
		  vEPC[(max-1)-i]=exp-1;
		}
   }
}





float PoliV::evaluar(float x)
{
	float resultado=0;
	for (int i = 0; i < ntEPC; i++) {
		int exp = exponente(i + 1);
		int coef = coeficiente(exp);
		resultado += coef * pow(x, exp);
	}
	return resultado;
}




string PoliV::to_str() {
	string s = "";
	for (int i = 1; i <= numero_terminos(); i++) {
		int ex = exponente(i);
		int co = coeficiente(ex);
		if (co > 0)
			s += "+";
		s += to_string(co) + "x^" + to_string(ex);
	}
	return s;
}

void PoliV::imprimir() {
	if (ntEPC == 0) {
		cout << "El polinomio est� vac�o." << endl;
		return;
	}

	for (int i = 0; i < ntEPC; i++) {
		if (i > 0) {
			cout << " + ";
		}
		cout << vEPC[i] << "X^" << vEPC[i];
	}
	cout << endl;
}

string PoliV::vectorToString() {
	std::string result = "V[";
	for (int i = 0; i < MAXP; i++) {
		result += to_string(vEPC[i]);
		if (i < MAXP - 1) {
			result += ",";
		}
	}
	result += "]";
	return result;
}