//---------------------------------------------------------------------------

#pragma hdrstop

#include "ConjuntoL.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

ConjuntoL::ConjuntoL() {
	elem= new ListaP();
}




bool ConjuntoL::vacio() {
	return elem->vacio();
}




bool ConjuntoL::pertenece(int e) {
	if (!elem->vacio()) {
		NodoL* p=elem->primero();
		while (p!=NULL){
			int ele= elem->recupera(p);
			if (e==ele) {
				return true;
			}
			p=elem->siguiente(p);
		}
	} else{
		return false;
	}
}



void ConjuntoL::inserta(int e) {
	if (!pertenece(e)) {
		elem->insertar(elem->primero(),e);
	}
}




int ConjuntoL::cardinal() {
	return elem->Longitud();
}



int ConjuntoL::ordinal(int e) {
	if (!elem->vacio()) {
		int c=0;
		NodoL* p=elem->primero();
		while (p!=NULL){
			c++;
			int ele=elem->recupera(p);
			if (e==ele) {
				return c;
			}
			p=elem->siguiente(p);
		}
		return 0;
	}else{
		return 0;
	}
}




void ConjuntoL::suprime(int e) {
	if (pertenece(e)) {
		NodoL* p=elem->primero();
		while (p!=NULL){
			int ele=elem->recupera(p);
			if (e==ele) {
				elem->suprime(p);
				return;
			}
			p=elem->siguiente(p);
		}
	}
}
int ConjuntoL::muestrea() {
	if (!vacio()) {
		int pos=rand()%cardinal()+1;
		NodoL* dir=elem->primero();
		int cont=0;
		for (int i=0; i < cardinal(); i++) {
			cont++;
			if (cont==pos) {
				return elem->recupera(dir);
			}
		}
	}
}
string ConjuntoL::to_str() {
	string s="{";
	NodoL* p=elem->primero();
	while (p!=NULL){
		int ele = elem->recupera(p);
		s +=to_string(ele);
		if (p!=elem->fin()) {
			s +=",";
		}
		p=elem->siguiente(p);
	}
	return s+"}";
}

