//---------------------------------------------------------------------------

#pragma hdrstop

#include "PolinomioP.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)


PolinomioP::PolinomioP(){
	Ptr_Poli=NULL;
	Nterminos=0;
}


bool PolinomioP::Es_Cero(){
	return Nterminos==0;
}


int PolinomioP::Grado(){
	if (!Es_Cero()) {
		int max=Ptr_Poli->Expo;
		NodoPoli* aux=Ptr_Poli;
		while (aux!=NULL){
			if (aux->Expo>max) {
				max=aux->Expo;
			}
			// cambio de nodo o bagon
			aux=aux->sig;
		}
		return max;
	}
}



int PolinomioP::coeficiente(int exp){
	NodoPoli* dir=Buscar_Exponente(exp);
	if (dir!=NULL) {
		return dir->coef;
	}else{
		cout<<"No existe termino";
    }
}



void PolinomioP::Asignar_coeficiente(int coefi, int exp){
	NodoPoli* dir=Buscar_Exponente(exp);
	if (dir!=NULL) {
		dir->Coef=coefi;
		if (coefi==0) {
			suprime(dir);
			Nterminos--;
		}
	}
}



void PolinomioP::Poner_termino(int coef, int exp){
	NodoPoli* dir=Buscar_Exponente(exp);
	if (!dir) {
		NodoPoli* aux=new NodoPoli();
		if (aux!=NULL) {
			aux->Coef=coef;
			aux->Expo=exp;
			aux->sig=Ptr_Poli;
			Ptr_Poli=axu;
			Nterminos++;
		}
	} else{
		int new_coef=coef+dir->Coef;
		dir->Coef=new_coef;
		if (new_Coef==0) {
			suprime(dir);
			Nterminos--;
		}
    }
}



int PolinomioP::numero_terminos(){}
int PolinomioP::Exponente(int nroter){}
PolinomioP PolinomioP::Sumar(PolinomioP* p1, PolinomioP* p2){}
PolinomioP PolinomioP::Restar(PolinomioP* p1, PolinomioP* p2){}
PolinomioP PolinomioP::Multiplicar(PolinomioP* p1, PolinomioP* p2){}
